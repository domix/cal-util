plugins {
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id "application"
  id "net.ltgt.apt-eclipse" version "0.21"
  id "net.ltgt.apt-idea" version "0.21"
  id 'com.github.ben-manes.versions' version '0.33.0'
}

version "0.1"
group "cal.util"

repositories {
  mavenCentral()
  maven { url "https://jcenter.bintray.com" }
}

configurations {
  // for dependencies that are needed for development only
  developmentOnly
}

dependencies {
  annotationProcessor "org.projectlombok:lombok:${ lombokVersion }"
  testAnnotationProcessor "org.projectlombok:lombok:${ lombokVersion }"
  annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  annotationProcessor "io.micronaut:micronaut-graal"
  annotationProcessor "io.micronaut:micronaut-inject-java"
  annotationProcessor "io.micronaut:micronaut-validation"
  compileOnly "com.oracle.substratevm:svm"
  compileOnly "org.projectlombok:lombok:${ lombokVersion }"
  implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  implementation "io.micronaut:micronaut-http-client"
  implementation "io.micronaut:micronaut-inject"
  implementation "io.micronaut:micronaut-validation"
  implementation "io.micronaut:micronaut-runtime"
  implementation "io.micronaut:micronaut-http-server-netty"
  implementation "javax.annotation:javax.annotation-api"
  runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
  testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
  testAnnotationProcessor "io.micronaut:micronaut-inject-java"
  testImplementation "org.projectlombok:lombok:${ lombokVersion }"
  testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
  testImplementation "org.junit.jupiter:junit-jupiter-api"
  testImplementation "io.micronaut.test:micronaut-test-junit5"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

  implementation 'org.mnode.ical4j:ical4j:3.0.13'
}

test.classpath += configurations.developmentOnly

mainClassName = "cal.util.Application"
// use JUnit 5 platform
test {
  useJUnitPlatform()
}

shadowJar {
  mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
  options.compilerArgs.add('-parameters')
}
